(()=>{var c=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.prototype.hasOwnProperty;var b=(e,n)=>{for(var o in n)c(e,o,{get:n[o],enumerable:!0})},x=(e,n,o,s)=>{if(n&&typeof n=="object"||typeof n=="function")for(let i of f(n))!g.call(e,i)&&i!==o&&c(e,i,{get:()=>n[i],enumerable:!(s=y(n,i))||s.enumerable});return e};var A=e=>x(c({},"__esModule",{value:!0}),e);var r=(e,n,o)=>new Promise((s,i)=>{var v=t=>{try{l(o.next(t))}catch(p){i(p)}},m=t=>{try{l(o.throw(t))}catch(p){i(p)}},l=t=>t.done?s(t.value):Promise.resolve(t.value).then(v,m);l((o=o.apply(e,n)).next())});var h={};b(h,{onUnload:()=>U});var w={name:"Dorion",invoke:(e,n)=>{var o;return(o=window.__TAURI__)!=null&&o.invoke?window.__TAURI__.invoke(e,n):window.__TAURI__.core.invoke(e,n)},event:{emit:(e,n)=>window.__TAURI__.event.emit(e,n),listen:(e,n)=>r(void 0,null,function*(){return window.__TAURI__.event.listen(e,n)})},app:{getVersion:()=>window.__TAURI__.app.getVersion()},process:{relaunch:()=>window.__TAURI__.process.relaunch()},apiWindow:{appWindow:{setFullscreen:e=>{var n,o;return(o=(n=window.__TAURI__)==null?void 0:n.webviewWindow)!=null&&o.getCurrent?window.__TAURI__.webviewWindow.getCurrent().setFullscreen(e):window.__TAURI__.window.appWindow.setFullscreen(e)}}}};var _={name:"Flooed",invoke:(e,n)=>window.Flooed.invoke(e,n),event:{emit:()=>{},listen:()=>r(void 0,null,function*(){})},app:{getVersion:()=>window.Flooed.version},process:{relaunch:()=>window.Flooed.invoke("relaunch")},apiWindow:{appWindow:{setFullscreen:e=>window.Flooed.invoke("set_fullscreen",e)}}};var u={name:"Unknown",invoke:()=>r(void 0,null,function*(){}),event:{emit:()=>{},listen:()=>r(void 0,null,function*(){})},app:{getVersion:()=>"0.0.0"},process:{relaunch:()=>{}},apiWindow:{appWindow:{setFullscreen:()=>{}}}};var d="None";window.Dorion?d="Dorion":window.Flooed&&(d="Flooed");var a;switch(d){case"Dorion":a=w;break;case"Flooed":a=_;break;default:a=u;break}var P=window[d];var S=a.name,q=a.invoke,k=a.event,M=a.app,O=a.process,j=a.apiWindow;var{flux:{dispatcher:F}}=shelter,R=k.listen("streamer_mode_toggle",e=>{let n=e.payload;F.dispatch({type:"STREAMER_MODE_UPDATE",key:"enabled",value:n})}),U=()=>{R()};return A(h);})();
